generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  // accounts      Account[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Blog      Blog[]
  Comment   Comment[]
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model verificationToken {
//   id String @id @default(cuid())
//   email String
//   token String @unique
//   expires DateTime

//   @@unique([email, token])
// }

// model PasswordResetToken {
//   id String @id @default(cuid())
//   email String
//   token String @unique
//   expires DateTime

//   @@unique([email, token])
// }

model Blog {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  owner     User      @relation(fields: [id], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  owner     String   @db.ObjectId
  blogId    String   @db.ObjectId
  user      User     @relation(fields: [owner], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
